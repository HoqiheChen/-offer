public class Solution {
    private int cols;
    private int rows;
    
    public boolean hasPath(char[] matrix, int rows, int cols, char[] str)
    {
        this.cols=cols;
        this.rows=rows;
        boolean[]visited = new boolean[matrix.length]; 
        if(matrix==null||rows<=0||cols<=0||str==null)
            return false;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(find(matrix,i,j,visited,rows,cols,str,0))
                    return true;
            }
        }
        return false;
    }
    
    public boolean find(char[] matrix,int row,int col,boolean[] visited,int rows,int cols,char[] str,int strlen){
        if(row>=rows||row<0||col>=cols||col<0||visited[row*cols+col]||str[strlen]!=matrix[row*cols+col])
            return false;
        visited[row*cols+col]=true;
        if(strlen==str.length-1)
            return true;
        if(find(matrix,row-1,col,visited,rows,cols,str,strlen+1)||
           find(matrix,row+1,col,visited,rows,cols,str,strlen+1)||
          find(matrix,row,col-1,visited,rows,cols,str,strlen+1)||
          find(matrix,row,col+1,visited,rows,cols,str,strlen+1))
            return true;
        visited[row*cols+col]=false;
        return false;
    }


}